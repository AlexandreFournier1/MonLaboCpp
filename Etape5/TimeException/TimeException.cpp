#include "TimeException.h"

namespace planning {

const int TimeException::INVALID_HOUR = 1;
const int TimeException::INVALID_MINUTE = 2; 
const int TimeException::OVERFLOW = 3;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

TimeException::TimeException():Exception()
{
	#ifdef DEBUG
		cout << "[TimeException] Appel constructeur par dÃ©faut" << endl;
	#endif

	setCode(0);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

TimeException::TimeException(const TimeException& t):Exception()
{
	#ifdef DEBUG
		cout << "[TimeException] Appel constructeur de copie" << endl;
	#endif

	setCode(t.getCode());
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

TimeException::TimeException(string m, int c):Exception(m)
{
	#ifdef DEBUG
		cout << "[TimeException] Appel constructeur d'initialisation" << endl;
	#endif

	setCode(c);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

TimeException::~TimeException()
{
	#ifdef DEBUG
		cout << "[Exception] Appel destructeur" << endl;
	#endif
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
	
void TimeException::setCode(const int c)
{
	code = c;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

int TimeException::getCode() const
{
	return code;
}

}