#include "Group.h"

#define DEBUG

Group::Group():Schedulable()
{
	#ifdef DEBUG
		cout << "[Group] Appel constructeur par dÃ©faut" << endl;
	#endif

	setName("pas de groupe");
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Group::Group(const Group& g):Schedulable(g)
{
	#ifdef DEBUG
		cout << "[Group] Appel constructeur de copie" << endl;
	#endif

	setName(g.getName());
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Group::Group(int i, string n):Schedulable(i)
{
	#ifdef DEBUG
		cout << "[Group] Appel constructeur d'initialisation" << endl;
	#endif

	setName(n);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Group::~Group()
{
	#ifdef DEBUG
		cout << "[Group] Appel destructeur" << endl;
	#endif
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Group::setName(const string n)
{
	name = n;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

string Group::getName() const
{
	return name;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

string Group::toString() const
{
	ostringstream oss;
	oss << this->getName() << endl;
	return oss.str();
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

string Group::tuple() const
{
	ostringstream oss;
	oss << to_string(this->getId()) << ";" << this->getName() << endl;
	return oss.str();
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

ostream& operator<<(ostream& s, const Group& g)
{
	s << g.toString() << endl;
	return s;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Group& Group::operator=(const Group& g)
{
	setName(g.getName());

	return (*this);
}