#include "Classroom.h"

#define DEBUG

Classroom::Classroom():Schedulable()
{
	#ifdef DEBUG
		cout << "[Classroom] Appel constructeur par dÃ©faut" << endl;
	#endif

	setName("vide");
	setSeatingCapacity(0);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Classroom::Classroom(const Classroom& c):Schedulable(c)
{
	#ifdef DEBUG
		cout << "[Classroom] Appel constructeur de copie" << endl;
	#endif

	setName(c.getName());
	setSeatingCapacity(c.getSeatingCapacity());
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Classroom::Classroom(int i, string n, int s):Schedulable(i)
{
	#ifdef DEBUG
		cout << "[Classroom] Appel constructeur d'initialisation" << endl;
	#endif

	setName(n);
	setSeatingCapacity(s);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Classroom::~Classroom()
{
	#ifdef DEBUG
		cout << "[Classroom] Appel destructeur" << endl;
	#endif
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Classroom::setName(const string n)
{
	name = n;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Classroom::setSeatingCapacity(const int s)
{
	seatingCapacity = s;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

string Classroom::getName() const
{
	return name;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

int Classroom::getSeatingCapacity() const
{
	return seatingCapacity;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

string Classroom::toString() const
{
	ostringstream oss;
	oss << this->getName() << " (" << this->getSeatingCapacity() << ")" << endl;
	return oss.str();
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

string Classroom::tuple() const
{
	ostringstream oss;
	oss << to_string(this->getId()) << ";" << this->toString() << endl;
	return oss.str();
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

ostream& operator<<(ostream& s, const Classroom& c)
{
	s << c.toString() << endl;
	return s;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Classroom& Classroom::operator=(const Classroom& c)
{
	setName(c.getName());
	setSeatingCapacity(c.getSeatingCapacity());

	return (*this);
}