#include "Time.h"

//#define DEBUG

namespace planning {

Time::Time()
{
	#ifdef DEBUG
		cout << "--- Appel du constructeur par dÃ©faut ---" << endl;
	#endif

	setHour(0);
	setMinute(0);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time::Time(const Time &t)
{
	#ifdef DEBUG
		cout << "--- Appel du constructeur de copie ---" << endl;
	#endif

	setHour(t.getHour());
	setMinute(t.getMinute());
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time::~Time() 
{
	#ifdef DEBUG
		cout << "--- Appel du destructeur ---" << endl;
	#endif
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time::Time(int h, int m)
{
	#ifdef DEBUG
		cout << "--- Appel du constructeur d'initialisation 1 ---" << endl;
	#endif

	setHour(h);
	setMinute(m);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time::Time(int duration)
{
	#ifdef DEBUG
		cout << "--- Appel du constructeur d'initialisation 2 ---" << endl;
	#endif

	if (duration / 60 == 0)
	{
		setMinute(duration);
		return;
	}

	setHour(duration/60);
	setMinute(duration%60);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Time::setHour(int h)
{
	if(h < 0 || h > 24) return;
	hour = h;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Time::setMinute(int m)
{
	if(m < 0 || m > 60) return;
	minute = m;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

int Time::getHour() const
{
	return hour;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

int Time::getMinute() const
{
	return minute;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Time::display() const
{
	cout << "Time : " << setw(2) << setfill('0') << hour << "h" << setw(2) << setfill('0') << minute << endl;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time& Time::operator=(const Time &t)
{
	hour = t.hour;
	minute = t.minute;

	return (*this);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time operator+(const Time&t, const int m)
{
	Time tmp(t);

	tmp.minute += m;

	if (tmp.minute >= 60)
	{
		tmp.hour += tmp.minute / 60;
		tmp.minute = tmp.minute % 60;
	}

	return tmp;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time operator+(const int m, const Time&t)
{
	return t + m;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time operator+(const Time&t1, const Time&t2)
{
	Time tmp;

	tmp.hour = t1.hour + t2.hour;
	tmp.minute = t1.minute + t2.minute;

	if (tmp.minute >= 60)
	{
		tmp.hour += tmp.minute / 60;
		tmp.minute = tmp.minute % 60;
	}

	return tmp;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time operator-(const Time&t, const int m)
{
	Time tmp(t);

	tmp.minute -= m;

	if (tmp.minute < 0)
	{
		tmp.hour -= -tmp.minute / 60;
		tmp.minute = 60 - (-tmp.minute % 60);
	}

	return tmp;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time operator-(const int m, const Time&t)
{
	return t + m;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Time operator-(const Time&t1, const Time&t2)
{
	Time tmp;

	tmp.hour = t1.hour - t2.hour;
	tmp.minute = t1.minute - t2.minute;

	if (tmp.minute < 0)
	{
		tmp.hour -= -tmp.minute / 60;
		tmp.minute = 60 - (-tmp.minute % 60);
	}

	return tmp;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

}