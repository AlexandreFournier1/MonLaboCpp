#include "Event.h"
#include "Timing.h"
#include "Time.h"

//#define DEBUG

namespace planning {

int Event::currentCode = 1;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Event::Event()
{
	#ifdef DEBUG
		cout << "[Event] Appel constructeur par dÃ©faut" << endl;
	#endif

	setCode(currentCode);
	title = nullptr;
	setTitle("default");
	timing = nullptr;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Event::Event(int c, const char *t)
{
	#ifdef DEBUG
		cout << "[Event] Appel du constructeur d'initialisation" << endl;
	#endif

	setCode(c);
	currentCode = c;
	title = nullptr;
	setTitle(t);
	timing = nullptr;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Event::Event(const Event &e)
{
	#ifdef DEBUG
		cout << "[Event] Appel du constructeur de copie" << endl;
	#endif

	setCode(e.getCode());
	title = nullptr;
	setTitle(e.getTitle());
	timing = nullptr;
	setTiming(e.getTiming());
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Event::~Event()
{
	#ifdef DEBUG
		cout << "[Event] Appel du destructeur" << endl;
	#endif

	if (title) delete title;
	if (timing) delete timing;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Event::setCode(int c)
{
	if(c <= 0) return;
	code = c;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Event::setTitle(const char *t)
{
	if (title) delete title;
	title = new char[strlen(t) + 1];
	strcpy(title, t);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Event::setTiming(const Timing& t)
{
	timing = new Timing(t);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

int Event::getCode() const
{
	return code;
}

const char * Event::getTitle() const
{
	return title;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

Timing Event::getTiming() const
{
	return *timing;
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

void Event::display() const
{
	cout << "Event (" << code << ") :" << title << endl;
	if (!timing) return;
	timing->display();
}

}